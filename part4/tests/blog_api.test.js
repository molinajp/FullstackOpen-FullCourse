const mongoose = require('mongoose')
const supertest = require('supertest')
const app = require('../app')
const Blog = require('../models/blog')
const User = require('../models/user')
const bcrypt = require('bcrypt')

const api = supertest(app)

const basePath = '/api/blogs'
const allBlogs = [
    {
        _id: "5a422a851b54a676234d17f7",
        title: "React patterns",
        author: "Michael Chan",
        url: "https://reactpatterns.com/",
        likes: 7,
        __v: 0
    },
    {
        _id: "5a422aa71b54a676234d17f8",
        title: "Go To Statement Considered Harmful",
        author: "Edsger W. Dijkstra",
        url: "http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html",
        likes: 5,
        __v: 0
    },
    {
        _id: "5a422b3a1b54a676234d17f9",
        title: "Canonical string reduction",
        author: "Edsger W. Dijkstra",
        url: "http://www.cs.utexas.edu/~EWD/transcriptions/EWD08xx/EWD808.html",
        likes: 12,
        __v: 0
    },
    {
        _id: "5a422b891b54a676234d17fa",
        title: "First class tests",
        author: "Robert C. Martin",
        url: "http://blog.cleancoder.com/uncle-bob/2017/05/05/TestDefinitions.htmll",
        likes: 10,
        __v: 0
    },
    {
        _id: "5a422ba71b54a676234d17fb",
        title: "TDD harms architecture",
        author: "Robert C. Martin",
        url: "http://blog.cleancoder.com/uncle-bob/2017/03/03/TDD-Harms-Architecture.html",
        likes: 0,
        __v: 0
    },
    {
        _id: "5a422bc61b54a676234d17fc",
        title: "Type wars",
        author: "Robert C. Martin",
        url: "http://blog.cleancoder.com/uncle-bob/2016/05/01/TypeWars.html",
        likes: 2,
        __v: 0
    }
]

beforeEach(async () => {
    await Blog.deleteMany({})
    await User.deleteMany({username: 'test'})

    const blogObjects = allBlogs.map(blog => new Blog(blog))
    const promiseArray = blogObjects.map(blog => blog.save())
    await Promise.all(promiseArray)

    const username = 'test'
    const name = 'test'
    const password = 'test'
    
    const passwordHash = await bcrypt.hash(password, 10)
    const user = new User({
        username,
        name,
        passwordHash
    })
    await user.save()

})

describe('test for get method', () => {
    test('correct amount of total blogs', async () => {
        const response = await api.get(basePath)
        expect(response.body).toHaveLength(allBlogs.length)
    })
})

describe('test for properties in object', () => {
    test('verify that the unique identifier property of the blog is named id', async () => {
        const response = await api.get(basePath)
        expect(response.body[0].id).toBeDefined()
    })
})


describe('test for post method', () => {
    test('verify that post method work as intended', async () => {
        const newBlog = {
            title: "Some title",
            author: "I am",
            url: "http://me-myself-and-I.com",
            likes: 1000
        }

        const user = {
            username: 'test',
            password: 'test'
        }

        const responseLogin = await api.post('/api/login').send(user)

        await api
            .post(basePath)
            .send(newBlog)
            .set('Authorization', `Bearer ${responseLogin.body.token}`)
            .expect(201)
            .expect('Content-Type', /application\/json/)

        const response = await api.get(basePath)
        expect(response.body).toHaveLength(allBlogs.length + 1)

        response.body.forEach(x => {
            delete x.id
            delete x.user
        })//delete id because is autogenerated from db

        expect(response.body).toContainEqual(newBlog);
    })

    test('verify that if likes is missing defaults to 0', async () => {
        const newBlog = {
            title: "Some title",
            author: "I am",
            url: "http://me-myself-and-I.com",
        }

        const user = {
            username: 'test',
            password: 'test'
        }

        const responseLogin = await api.post('/api/login').send(user)

        await api
            .post(basePath)
            .send(newBlog)
            .set('Authorization', `Bearer ${responseLogin.body.token}`)

        const response = await api.get(basePath)
        const arrayWithObject = response.body.filter(blog => blog.title === newBlog.title)
        expect(arrayWithObject[0].likes).toBe(0)
    })

    test('verify that if url is missing returns a 400', async () => {
        const newBlog = {
            title: "Some title",
            author: "I am",
            likes: 0
        }


        const user = {
            username: 'test',
            password: 'test'
        }

        const responseLogin = await api.post('/api/login').send(user)

        await api
            .post(basePath)
            .send(newBlog)
            .set('Authorization', `Bearer ${responseLogin.body.token}`)
            .expect(400)

        const response = await api.get(basePath)
        expect(response.body).toHaveLength(allBlogs.length)
    })

    test('verify that if title is missing returns a 400', async () => {
        const newBlog = {
            author: "I am",
            url: "http://me-myself-and-I.com",
            likes: 0
        }

        const user = {
            username: 'test',
            password: 'test'
        }

        const responseLogin = await api.post('/api/login').send(user)

        await api
            .post(basePath)
            .send(newBlog)
            .set('Authorization', `Bearer ${responseLogin.body.token}`)
            .expect(400)

        const response = await api.get(basePath)
        expect(response.body).toHaveLength(allBlogs.length)
    })


    test('verify that if token is missing returns 401', async () => {
        const newBlog = {
            author: "I am",
            url: "http://me-myself-and-I.com",
            likes: 0
        }

        await api
            .post(basePath)
            .send(newBlog)
            .expect(401)

        const response = await api.get(basePath)
        expect(response.body).toHaveLength(allBlogs.length)
    })

})

describe('test for delete method', () => {
    test('verify that delete works correctly', async () => {
        const newBlog = {
            title: "Some title",
            author: "I am",
            url: "http://me-myself-and-I.com",
        }

        const user = {
            username: 'test',
            password: 'test'
        }

        const responseLogin = await api.post('/api/login').send(user)

        const response = await api
            .post(basePath)
            .send(newBlog)
            .set('Authorization', `Bearer ${responseLogin.body.token}`)

        await api
            .delete(`${basePath}/${response.body.id}`)
            .set('Authorization', `Bearer ${responseLogin.body.token}`)

        const responseFromGet = await api.get(basePath)
        expect(responseFromGet.body).toHaveLength(allBlogs.length)

    })

    test('verify that throws 400 for malformatted id', async () => {

        const user = {
            username: 'test',
            password: 'test'
        }

        const responseLogin = await api.post('/api/login').send(user)

        await api
            .delete(`${basePath}/1`)
            .set('Authorization', `Bearer ${responseLogin.body.token}`)
            .expect(400)
    })
})

describe('test for put method', () => {
    test('verify that updates works correctly', async () => {
        const newBlog = {
            title: "Some title",
            author: "I am",
            url: "http://me-myself-and-I.com",
            likes: 0
        }

        const user = {
            username: 'test',
            password: 'test'
        }

        const responseLogin = await api.post('/api/login').send(user)

        const response = await api
            .post(basePath)
            .send(newBlog)
            .set('Authorization', `Bearer ${responseLogin.body.token}`)

        newBlog.likes = 5
        await api.put(`${basePath}/${response.body.id}`).send(newBlog)

        const responseFromGet = await api.get(basePath)
        const arrayWithObject = responseFromGet.body.filter(blog => blog.title === newBlog.title)
        expect(arrayWithObject[0].likes).toBe(5)

    })

    test('verify that throws 400 for malformatted id', async () => {
        await api.put(`${basePath}/1`).expect(400)
    })

})

afterAll(() => {
    mongoose.connection.close();
})